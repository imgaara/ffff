{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["math","create","all","App","props","state","option","style","height","width","fetch","then","res","text","csv","sortedItems","readString","data","sort","a","b","histNavs","SortedArray","histNavsAbs","pctHist","map","row","date","fNav","parseFloat","isNaN","iNav","Math","round","insert","search","push","q20","quantileSeq","array","q50","q80","q20Abs","q50Abs","q80Abs","setState","isLoaded","title","x","tooltip","trigger","axisPointer","animation","xAxis","type","splitLine","show","yAxis","series","name","showSymbol","hoverAnimation","error","Grid","className","this","theme","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.e3f43930.chunk.js","sourcesContent":["import React,{Component} from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport faker from 'faker'\nimport {Card} from 'antd'\n//按需导入\nimport echarts from 'echarts/lib/echarts'\n//导入折线图\nimport 'echarts/lib/chart/line'\n// 引入提示框和标题组件\nimport 'echarts/lib/component/tooltip'\nimport 'echarts/lib/component/title'\nimport 'echarts/lib/component/legend'\nimport 'echarts/lib/component/markPoint'\nimport ReactEcharts from 'echarts-for-react'\nimport { readString } from 'react-papaparse'\nimport { create, all } from 'mathjs'\nimport SortedArray from 'sorted-array'\nimport SortedArraySet from 'collections/sorted-array-set'\n\n\nconst math = create(all)\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          option: {},\n          style: {height: '500px', width: '100%'}\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"https://raw.githubusercontent.com/imgaara/invest/master/fund/navs/100038.csv\")\n        .then(res => res.text())\n        .then(\n          (csv) => {\n            // console.log(csv);\n            let navItemList = readString(csv);\n            let sortedItems = navItemList.data.sort((a, b) => a[3] < b[3] ? -1 : 1);\n            // console.log(sortedItems);\n            let histNavs = new SortedArray([]);\n            let histNavsAbs = new SortedArray([]);\n            let pctHist = {\n              \"20\": [],\n              \"50\": [],\n              \"80\": [],\n              \"20abs\": [],\n              \"50abs\": [],\n              \"80abs\": [],\n              \"target\": [],\n            };\n\n            sortedItems.map((row) => {\n              let date = row[3]\n              let fNav = parseFloat(row[6])\n              if (!isNaN(fNav)) {\n                let iNav = Math.round(fNav * 10000)\n                histNavs.insert(iNav);\n                if (histNavsAbs.search(iNav) == -1) {\n                  histNavsAbs.insert(iNav);\n                }\n\n                pctHist[\"target\"].push([date, fNav]);\n                let q20 = math.quantileSeq(histNavs.array, 0.2);\n                let q50 = math.quantileSeq(histNavs.array, 0.5);\n                let q80 = math.quantileSeq(histNavs.array, 0.8);\n                let q20Abs = math.quantileSeq(histNavsAbs.array, 0.2);\n                let q50Abs = math.quantileSeq(histNavsAbs.array, 0.5);\n                let q80Abs = math.quantileSeq(histNavsAbs.array, 0.8);\n                pctHist[\"20\"].push([date, q20 / 10000.0]);\n                pctHist[\"50\"].push([date, q50 / 10000.0]);\n                pctHist[\"80\"].push([date, q80 / 10000.0]);\n                pctHist[\"20abs\"].push([date, q20Abs / 10000.0]);\n                pctHist[\"50abs\"].push([date, q50Abs / 10000.0]);\n                pctHist[\"80abs\"].push([date, q80Abs / 10000.0]);\n              }\n            });\n            // console.log(histNavs);\n            // console.log(math.quantileSeq(histNavs.array, 0.2, false));\n\n            this.setState({\n              isLoaded: true,\n              option: {\n                title: {\n                    text: '折线图三',\n                    x: 'center'\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        animation: false\n                    }\n                },\n                // legend: {\n                //     // orient: 'vertical',\n                //     top: 20,\n                //     right: 50,\n                //     data:['A','B','C']\n                // },\n                xAxis: {\n                    type: 'time',\n                    splitLine: {\n                        show: false\n                    }\n                    // axisLabel: {\n                    //     formatter: function(value, index) {\n                    //         return new Date(value).getFullYear();\n                    //     }\n                    // },\n                },\n                yAxis: {\n                    type: 'value'\n                },\n                series : [\n                  {\n                      name: 'target',\n                      type: 'line',\n                      showSymbol: false,\n                      hoverAnimation: false,\n                      data: pctHist[\"target\"]\n                  },\n                  {\n                      name: '20',\n                      type: 'line',\n                      showSymbol: false,\n                      hoverAnimation: false,\n                      data: pctHist[\"20\"]\n                  },\n                  {\n                      name: '50',\n                      type: 'line',\n                      showSymbol: false,\n                      hoverAnimation: false,\n                      data: pctHist[\"50\"]\n                  },\n                  {\n                      name: '80',\n                      type: 'line',\n                      showSymbol: false,\n                      hoverAnimation: false,\n                      data: pctHist[\"80\"]\n                  },\n                  {\n                      name: '20abs',\n                      type: 'line',\n                      showSymbol: false,\n                      hoverAnimation: false,\n                      data: pctHist[\"20abs\"]\n                  },\n                  {\n                      name: '50abs',\n                      type: 'line',\n                      showSymbol: false,\n                      hoverAnimation: false,\n                      data: pctHist[\"50abs\"]\n                  },\n                  {\n                      name: '80abs',\n                      type: 'line',\n                      showSymbol: false,\n                      hoverAnimation: false,\n                      data: pctHist[\"80abs\"]\n                  }\n                ]\n              }\n            });\n          },\n          // 注意：需要在此处处理错误\n          // 而不是使用 catch() 去捕获错误\n          // 因为使用 catch 去捕获异常会掩盖掉组件本身可能产生的 bug\n          (error) => {\n            this.setState({\n              isLoaded: true,\n              error\n            });\n          }\n        )\n    }\n\n    render() {\n        return (\n            <Card.Grid className=\"line_a\">\n                <ReactEcharts option={this.state.option} theme=\"ThemeStyle\" style={this.state.style} />\n            </Card.Grid>\n        )\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}