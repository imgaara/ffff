{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["watch_list","create","all","App","props","state","option","style","height","length","width","id","flatMap","fetch","fund_nav_url","fund_nav_stats_url","csv_list","titles","xAxis","yAxis","series","grids","i","console","log","fundIdx","navItemList","readString","data","sort","a","b","statsList","name","map","row","parseFloat","filter","r","isNaN","push","text","top","left","show","triggerEvent","type","splitLine","gridIndex","min","value","showSymbol","hoverAnimation","xAxisIndex","yAxisIndex","title","tooltip","trigger","axisPointer","animation","grid","Promise","this","build_fetch_list","then","resp_list","res","setState","isLoaded","handle_response","error","Grid","className","theme","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.9f644827.chunk.js","sourcesContent":["import React,{Component} from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport faker from 'faker'\nimport {Card} from 'antd'\n//按需导入\nimport echarts from 'echarts/lib/echarts'\n//导入折线图\nimport 'echarts/lib/chart/line'\n// 引入提示框和标题组件\nimport 'echarts/lib/component/tooltip'\nimport 'echarts/lib/component/title'\nimport 'echarts/lib/component/legend'\nimport 'echarts/lib/component/markPoint'\nimport ReactEcharts from 'echarts-for-react'\nimport { readString } from 'react-papaparse'\nimport { create, all } from 'mathjs'\nimport SortedArray from 'sorted-array'\nimport SortedArraySet from 'collections/sorted-array-set'\n\n\nconst math = create(all)\n\nconst watch_list = [\n    // 精选基金：\n    \"161005\", // 富国天惠\n    \"163406\", // 兴全合润\n    \"166002\", // 中欧新蓝筹\n    \"000172\", // 华泰柏瑞量化\n\n    // 宽基指数：\n    \"100038\", // 富国沪深300\n    \"270002\", // 兴全沪深300\n    \"110003\", // 易方达上证50\n    \"481012\", // 工银深红利\n    \"100032\", // 富国中证红利\n    \"161017\", // 富国中证500指\n\n    // 行业：\n    \"110022\", // 易方达消费行业\n    \"003095\", // 中欧医疗健康\n\n    // 可转债：\n    \"110027\", // 易方达安心回报\n    \"340001\", // 兴全可转债\n]\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          option: {},\n          style: {height: (watch_list.length * 300 + 100) + 'px', width: '100%'}\n        };\n    }\n\n    fund_nav_url(id) {\n        return \"https://raw.githubusercontent.com/imgaara/invest/master/fund/navs/\" + id + \".csv\";\n    }\n\n    fund_nav_stats_url(id) {\n        return \"https://raw.githubusercontent.com/imgaara/invest/master/fund/anav_stats/\" + id + \".csv\";\n    }\n\n    build_fetch_list() {\n        return watch_list.flatMap((id) => [fetch(this.fund_nav_url(id)),\n            fetch(this.fund_nav_stats_url(id))]);\n    }\n\n    handle_response(csv_list) {\n        let titles = [];\n        let xAxis = [];\n        let yAxis = [];\n        let series = [];\n        let grids = [];\n\n        for (let i = 0 ; i < csv_list.length; i += 2) {\n            console.log(\"handle response for idx: \" + i);\n            // 2: name, 3: date, 5: nav, 6: anav,\n            let fundIdx = i / 2;\n            let navItemList = readString(csv_list[i]).data.sort((a, b) => a[3] < b[3] ? -1 : 1);\n            // 0: date, 1: avg, 2: 20pct, 3: 80pct\n            let statsList = readString(csv_list[i + 1]).data.sort((a, b) => a[0] < b[0] ? -1 : 1);\n            let name = navItemList[0][2];\n\n            let data = {};\n            data['target'] = navItemList.map((row) => {\n                let date = row[3];\n                let fNav = parseFloat(row[6]);\n                return [date, fNav];\n            }).filter(r => !isNaN(r[1]));\n\n            data['50pct'] = statsList.map((row) => {\n                let date = row[0];\n                let fNav = parseFloat(row[1]);\n                return [date, fNav];\n            });\n\n            data['20pct'] = statsList.map((row) => {\n                let date = row[0];\n                let fNav = parseFloat(row[2]);\n                return [date, fNav];\n            });\n\n            data['80pct'] = statsList.map((row) => {\n                let date = row[0];\n                let fNav = parseFloat(row[3]);\n                return [date, fNav];\n            })\n\n            titles.push({\n                text: name + \" - \" + watch_list[fundIdx],\n                top: '' + ((fundIdx) * 300 + 5) + 'px',\n                left: 'center',\n                // textAlign:'center'\n            })\n\n            grids.push({\n                show: true,\n                top: '' + ((fundIdx) * 300 + 30) + 'px',\n                height: \"200px\",\n                triggerEvent: true,\n                // left: 'center',\n                // right: '20%',\n                // width:'auto',\n            })\n\n            xAxis.push({\n                type: 'time',\n                splitLine: {\n                    show: true\n                },\n                gridIndex: fundIdx\n                // axisLabel: {\n                //     formatter: function(value, index) {\n                //         return new Date(value).getFullYear();\n                //     }\n                // },\n            });\n\n            yAxis.push({\n                type: 'value',\n                splitLine: {\n                    show: true\n                },\n                gridIndex: fundIdx,\n                min: function (value) {\n                  return value.min * 0.97;\n                }\n            });\n\n            series.push({\n                name: 'target',\n                type: 'line',\n                showSymbol: false,\n                hoverAnimation: false,\n                data: data['target'],\n                xAxisIndex: fundIdx,\n                yAxisIndex: fundIdx\n            });\n\n            series.push({\n                name: '50pct',\n                type: 'line',\n                showSymbol: false,\n                hoverAnimation: false,\n                data: data['50pct'],\n                xAxisIndex: fundIdx,\n                yAxisIndex: fundIdx\n            });\n\n            series.push({\n                name: '20pct',\n                type: 'line',\n                showSymbol: false,\n                hoverAnimation: false,\n                data: data['20pct'],\n                xAxisIndex: fundIdx,\n                yAxisIndex: fundIdx\n            });\n\n            series.push({\n                name: '80pct',\n                type: 'line',\n                showSymbol: false,\n                hoverAnimation: false,\n                data: data['80pct'],\n                xAxisIndex: fundIdx,\n                yAxisIndex: fundIdx\n            });\n        }\n\n        return {\n            title: titles,\n            tooltip: {\n                trigger: 'axis',\n                axisPointer: {\n                    animation: false\n                }\n            },\n            grid: grids,\n            // legend: {\n            //     // orient: 'vertical',\n            //     top: 20,\n            //     right: 50,\n            //     data:['A','B','C']\n            // },\n            xAxis: xAxis,\n            yAxis: yAxis,\n            series : series\n        };\n    }\n\n    componentDidMount() {\n        Promise.all(this.build_fetch_list())\n            .then((resp_list) =>\n                Promise.all(resp_list.map((res) => res.text())))\n            .then(csv_list => {\n                    console.log(csv_list)\n                    this.setState({\n                        isLoaded: true,\n                        option: this.handle_response(csv_list)\n                    });\n                },\n                // 注意：需要在此处处理错误\n                // 而不是使用 catch() 去捕获错误\n                // 因为使用 catch 去捕获异常会掩盖掉组件本身可能产生的 bug\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                    console.log(error);\n                }\n            )\n    }\n\n    render() {\n        return (\n            <Card.Grid className=\"line_a\">\n                <ReactEcharts\n                    option={this.state.option}\n                    theme=\"ThemeStyle\"\n                    style={this.state.style} />\n            </Card.Grid>\n        )\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}